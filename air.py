import ee
import folium
from streamlit_folium import st_folium
import streamlit as st
import plotly.express as px
import json
import time

# X√°c th·ª±c v√† kh·ªüi t·∫°o Earth Engine
ee.Initialize(project='teak-vent-437103-t3')

# C·∫•u h√¨nh b·ªë c·ª•c trang
st.set_page_config(layout="wide")

# Ti√™u ƒë·ªÅ ch√≠nh
st.title("Ph√¢n t√≠ch ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ - Ph∆∞·ªùng T√¢n B√¨nh, TP ƒê·ªìng Xo√†i, B√¨nh Ph∆∞·ªõc")

@st.cache_data(ttl=3600)  # Cache d·ªØ li·ªáu trong 1 gi·ªù
def load_data():
    # T·∫£i FeatureCollection tanbinh v√† ch·ªâ l·∫•y h√¨nh h·ªçc ƒë·ªÉ gi·∫£m k√≠ch th∆∞·ªõc
    tanbinh = ee.FeatureCollection("projects/teak-vent-437103-t3/assets/tanbinh").geometry()
    
    # Load CO data
    ST5_CO = ee.ImageCollection('COPERNICUS/S5P/OFFL/L3_CO')
    image_CO = ST5_CO.filterBounds(tanbinh) \
                     .select('CO_column_number_density') \
                     .filterDate('2023-01-01', '2023-12-31') \
                     .mean() \
                     .clip(tanbinh)
    map_id_dict_CO = image_CO.getMapId({
        'min': 0,
        'max': 0.05,
        'palette': ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red']
    })
    
    # Load NO2 data
    ST5_NO2 = ee.ImageCollection('COPERNICUS/S5P/OFFL/L3_NO2')
    image_NO2 = ST5_NO2.filterBounds(tanbinh) \
                     .select('tropospheric_NO2_column_number_density') \
                     .filterDate('2023-01-01', '2023-12-31') \
                     .mean() \
                     .clip(tanbinh)
    map_id_dict_NO2 = image_NO2.getMapId({
        'min': 0,
        'max': 0.0002,
        'palette': ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red']
    })
    
    # Load HCHO data
    ST5_HCHO = ee.ImageCollection('COPERNICUS/S5P/OFFL/L3_HCHO')
    image_HCHO = ST5_HCHO.filterBounds(tanbinh) \
                     .select('tropospheric_HCHO_column_number_density') \
                     .filterDate('2023-01-01', '2023-12-31') \
                     .mean() \
                     .clip(tanbinh)
    map_id_dict_HCHO = image_HCHO.getMapId({
        'min': 0.0,
        'max': 0.0003,
        'palette': ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red']
    })
    
    return tanbinh, map_id_dict_CO, image_CO, map_id_dict_NO2, image_NO2, map_id_dict_HCHO, image_HCHO

# Hi·ªÉn th·ªã thanh ti·∫øn tr√¨nh khi ƒëang t·∫£i d·ªØ li·ªáu
with st.spinner('ƒêang t·∫£i d·ªØ li·ªáu t·ª´ Google Earth Engine...'):
    tanbinh, map_id_dict_CO, image_CO, map_id_dict_NO2, image_NO2, map_id_dict_HCHO, image_HCHO = load_data()

# Chia layout th√†nh hai c·ªôt: b·∫£n ƒë·ªì b√™n tr√°i, th√¥ng tin b√™n ph·∫£i
col_map, col_info = st.columns([3, 2])

with col_map:
    # T·∫°o b·∫£n ƒë·ªì v·ªõi folium - T·ªça ƒë·ªô cho ph∆∞·ªùng T√¢n B√¨nh, TP ƒê·ªìng Xo√†i, B√¨nh Ph∆∞·ªõc
    m = folium.Map(location=[11.5353, 106.8799], zoom_start=14)

    # Th√™m l·ªõp CO v√†o b·∫£n ƒë·ªì
    folium.TileLayer(
        tiles=map_id_dict_CO['tile_fetcher'].url_format,
        attr='Google Earth Engine',
        overlay=True,
        name='S5P CO',
        show=True
    ).add_to(m)

    # Th√™m l·ªõp NO2 v√†o b·∫£n ƒë·ªì
    folium.TileLayer(
        tiles=map_id_dict_NO2['tile_fetcher'].url_format,
        attr='Google Earth Engine',
        overlay=True,
        name='S5P NO2',
        show=False
    ).add_to(m)

    # Th√™m l·ªõp HCHO v√†o b·∫£n ƒë·ªì
    folium.TileLayer(
        tiles=map_id_dict_HCHO['tile_fetcher'].url_format,
        attr='Google Earth Engine',
        overlay=True,
        name='S5P HCHO',
        show=False
    ).add_to(m)

    # Th√™m l·ªõp FeatureCollection v√†o b·∫£n ƒë·ªì
    try:
        # S·ª≠ d·ª•ng c√°ch an to√†n ƒë·ªÉ l·∫•y GeoJSON t·ª´ geometry
        tanbinh_geojson = tanbinh.getInfo()
        folium.GeoJson(
            tanbinh_geojson,
            name='Ph∆∞·ªùng T√¢n B√¨nh'
        ).add_to(m)
    except Exception as e:
        st.warning(f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã ranh gi·ªõi Ph∆∞·ªùng T√¢n B√¨nh: {str(e)}")

    # Th√™m c√¥ng c·ª• v·∫Ω
    draw = folium.plugins.Draw(export=True)
    m.add_child(draw)

    # Th√™m ch√∫ th√≠ch cho b·∫£n ƒë·ªì
    folium.LayerControl().add_to(m)

    st.write("üëâ Click v√†o b·∫£n ƒë·ªì ƒë·ªÉ xem n·ªìng ƒë·ªô kh√≠ t·∫°i v·ªã tr√≠ ƒë√≥")
    
    # Hi·ªÉn th·ªã b·∫£n ƒë·ªì v√† l·∫•y d·ªØ li·ªáu t∆∞∆°ng t√°c
    st_data = st_folium(m, width=800, height=600)

with col_info:
    # Ch·ª©a th√¥ng tin k·∫øt qu·∫£ ph√¢n t√≠ch
    st.subheader("Th√¥ng tin ph√¢n t√≠ch")
    
    # Caching cho sample point data
    @st.cache_data(ttl=3600)  # Cache 1 gi·ªù
    def get_point_data(lng, lat):
        clicked_point = ee.Geometry.Point([lng, lat])
        
        # L·∫•y gi√° tr·ªã CO, NO2, HCHO c√πng l√∫c
        co_value = image_CO.sample(region=clicked_point, scale=1000, geometries=True).first().get('CO_column_number_density').getInfo()
        no2_value = image_NO2.sample(region=clicked_point, scale=1000, geometries=True).first().get('tropospheric_NO2_column_number_density').getInfo()
        hcho_value = image_HCHO.sample(region=clicked_point, scale=1000, geometries=True).first().get('tropospheric_HCHO_column_number_density').getInfo()
        
        return co_value, no2_value, hcho_value
    
    # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng click v√†o b·∫£n ƒë·ªì
    if st_data.get('last_clicked'):
        # L·∫•y t·ªça ƒë·ªô c·ªßa ƒëi·ªÉm ƒë√£ click
        clicked_lat = st_data['last_clicked']['lat']
        clicked_lng = st_data['last_clicked']['lng']
        
        # Hi·ªÉn th·ªã ph·∫ßn ti√™u ƒë·ªÅ k·∫øt qu·∫£
        st.markdown(f"#### üìå N·ªìng ƒë·ªô kh√≠ t·∫°i v·ªã tr√≠ ƒë√£ ch·ªçn")
        st.markdown(f"**T·ªça ƒë·ªô**: {clicked_lat:.4f}, {clicked_lng:.4f}")
        
        # Hi·ªÉn th·ªã thanh ti·∫øn tr√¨nh cho vi·ªác l·∫•y d·ªØ li·ªáu ƒëi·ªÉm
        with st.spinner('ƒêang ph√¢n t√≠ch d·ªØ li·ªáu...'):
            co_value, no2_value, hcho_value = get_point_data(clicked_lng, clicked_lat)
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric(
                label="CO (mol/m¬≤)",
                value=f"{co_value:.6f}" if co_value is not None else "Kh√¥ng c√≥ d·ªØ li·ªáu",
                delta=None
            )
        with col2:
            st.metric(
                label="NO2 (mol/m¬≤)",
                value=f"{no2_value:.6f}" if no2_value is not None else "Kh√¥ng c√≥ d·ªØ li·ªáu",
                delta=None
            )
        with col3:
            st.metric(
                label="HCHO (mol/m¬≤)",
                value=f"{hcho_value:.6f}" if hcho_value is not None else "Kh√¥ng c√≥ d·ªØ li·ªáu",
                delta=None
            )
    
    # Hi·ªÉn th·ªã th√¥ng tin khu v·ª±c ƒë∆∞·ª£c v·∫Ω
    if st_data['last_active_drawing'] is not None:
        st.markdown("---")
        st.markdown("#### üìç Ph√¢n t√≠ch khu v·ª±c ƒë∆∞·ª£c ch·ªçn")
        
        # Cache cho vi·ªác ph√¢n t√≠ch v√πng
        @st.cache_data(ttl=3600)
        def analyze_region(geojson_str):
            drawn_geojson = json.loads(geojson_str)
            drawn_feature = ee.Feature(ee.Geometry(drawn_geojson))
            
            # Ph√¢n t√≠ch CO
            selected_image_co = image_CO.clip(drawn_feature.geometry())
            mean_co = selected_image_co.reduceRegion(
                reducer=ee.Reducer.mean(),
                geometry=drawn_feature.geometry(),
                scale=1000,
                maxPixels=1e13
            ).getInfo()
            mean_co_value = mean_co.get('CO_column_number_density', 'Kh√¥ng c√≥ d·ªØ li·ªáu')
            
            # Ph√¢n t√≠ch NO2
            selected_image_no2 = image_NO2.clip(drawn_feature.geometry())
            mean_no2 = selected_image_no2.reduceRegion(
                reducer=ee.Reducer.mean(),
                geometry=drawn_feature.geometry(),
                scale=1000,
                maxPixels=1e13
            ).getInfo()
            mean_no2_value = mean_no2.get('tropospheric_NO2_column_number_density', 'Kh√¥ng c√≥ d·ªØ li·ªáu')
            
            # Ph√¢n t√≠ch HCHO
            selected_image_hcho = image_HCHO.clip(drawn_feature.geometry())
            mean_hcho = selected_image_hcho.reduceRegion(
                reducer=ee.Reducer.mean(),
                geometry=drawn_feature.geometry(),
                scale=1000,
                maxPixels=1e13
            ).getInfo()
            mean_hcho_value = mean_hcho.get('tropospheric_HCHO_column_number_density', 'Kh√¥ng c√≥ d·ªØ li·ªáu')
            
            return mean_co_value, mean_no2_value, mean_hcho_value
        
        # Chuy·ªÉn geojson sang chu·ªói ƒë·ªÉ c√≥ th·ªÉ cache
        geojson_str = json.dumps(st_data['last_active_drawing']['geometry'])
        
        # Hi·ªÉn th·ªã ti·∫øn tr√¨nh khi ph√¢n t√≠ch khu v·ª±c
        with st.spinner('ƒêang ph√¢n t√≠ch khu v·ª±c ƒë∆∞·ª£c ch·ªçn...'):
            mean_co_value, mean_no2_value, mean_hcho_value = analyze_region(geojson_str)
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric(
                label="CO (mol/m¬≤)", 
                value=f"{mean_co_value:.6f}" if isinstance(mean_co_value, float) else mean_co_value,
                delta=None
            )
        with col2:
            st.metric(
                label="NO2 (mol/m¬≤)", 
                value=f"{mean_no2_value:.6f}" if isinstance(mean_no2_value, float) else mean_no2_value,
                delta=None
            )
        with col3:
            st.metric(
                label="HCHO (mol/m¬≤)", 
                value=f"{mean_hcho_value:.6f}" if isinstance(mean_hcho_value, float) else mean_hcho_value,
                delta=None
            )
    
    # Th√™m gi·∫£i th√≠ch cho ng∆∞·ªùi d√πng
    st.markdown("---")
    st.markdown("### H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
    st.markdown("""
    - **Click v√†o b·∫£n ƒë·ªì**: Hi·ªÉn th·ªã gi√° tr·ªã n·ªìng ƒë·ªô kh√≠ t·∫°i ƒëi·ªÉm ƒë√≥
    - **S·ª≠ d·ª•ng c√¥ng c·ª• v·∫Ω**: V·∫Ω m·ªôt khu v·ª±c ƒë·ªÉ ph√¢n t√≠ch gi√° tr·ªã trung b√¨nh
    - **Chuy·ªÉn ƒë·ªïi l·ªõp**: S·ª≠ d·ª•ng b·∫£ng ƒëi·ªÅu khi·ªÉn l·ªõp ·ªü g√≥c ph·∫£i b·∫£n ƒë·ªì ƒë·ªÉ chuy·ªÉn ƒë·ªïi gi·ªØa c√°c lo·∫°i kh√≠
    """)

# T√≠nh gi√° tr·ªã trung b√¨nh theo th√°ng cho nƒÉm 2023
@st.cache_data(ttl=43200)  # L∆∞u cache 12 gi·ªù
def monthly_mean(year, collection_name, band_name, _geometry):
    months = ee.List.sequence(1, 12)
    collection = ee.ImageCollection(collection_name)

    return ee.FeatureCollection(months.map(lambda month: ee.Feature(None, {
        'month': month,
        'mean': collection.filterBounds(_geometry)
                         .filterDate(ee.Date.fromYMD(year, month, 1), ee.Date.fromYMD(year, month, 1).advance(1, 'month'))
                         .select(band_name)
                         .mean()
                         .reduceRegion(
                             reducer=ee.Reducer.mean(),
                             geometry=_geometry,
                             scale=1000,
                             maxPixels=1e13
                         ).get(band_name)
    })))

# T·∫°o c√°c bi·ªÉu ƒë·ªì trung b√¨nh theo th√°ng (v·ªõi cache)
with st.spinner('ƒêang t·∫°o bi·ªÉu ƒë·ªì theo th√°ng...'):
    monthly_means_2023_co = monthly_mean(2023, 'COPERNICUS/S5P/OFFL/L3_CO', 'CO_column_number_density', tanbinh).getInfo()
    monthly_means_2023_no2 = monthly_mean(2023, 'COPERNICUS/S5P/OFFL/L3_NO2', 'tropospheric_NO2_column_number_density', tanbinh).getInfo()
    monthly_means_2023_hcho = monthly_mean(2023, 'COPERNICUS/S5P/OFFL/L3_HCHO', 'tropospheric_HCHO_column_number_density', tanbinh).getInfo()

# Tab ƒë·ªÉ hi·ªÉn th·ªã c√°c bi·ªÉu ƒë·ªì
tab1, tab2, tab3 = st.tabs(["N·ªìng ƒë·ªô CO", "N·ªìng ƒë·ªô NO2", "N·ªìng ƒë·ªô HCHO"])

with tab1:
    # CO Chart
    months = [feature['properties']['month'] for feature in monthly_means_2023_co['features']]
    mean_co_values = [feature['properties']['mean'] for feature in monthly_means_2023_co['features']]
    fig_co = px.line(x=months, y=mean_co_values, labels={'x': 'Th√°ng', 'y': 'Gi√° tr·ªã CO (mol/m^2)'}, title='Gi√° tr·ªã trung b√¨nh CO theo th√°ng nƒÉm 2023 t·∫°i Ph∆∞·ªùng T√¢n B√¨nh, TP ƒê·ªìng Xo√†i')
    st.plotly_chart(fig_co, use_container_width=True)

with tab2:
    # NO2 Chart
    mean_no2_values = [feature['properties']['mean'] for feature in monthly_means_2023_no2['features']]
    fig_no2 = px.line(x=months, y=mean_no2_values, labels={'x': 'Th√°ng', 'y': 'Gi√° tr·ªã NO2 (mol/m^2)'}, title='Gi√° tr·ªã trung b√¨nh NO2 theo th√°ng nƒÉm 2023 t·∫°i Ph∆∞·ªùng T√¢n B√¨nh, TP ƒê·ªìng Xo√†i')
    st.plotly_chart(fig_no2, use_container_width=True)

with tab3:
    # HCHO Chart
    mean_hcho_values = [feature['properties']['mean'] for feature in monthly_means_2023_hcho['features']]
    fig_hcho = px.line(x=months, y=mean_hcho_values, labels={'x': 'Th√°ng', 'y': 'Gi√° tr·ªã HCHO (mol/m^2)'}, title='Gi√° tr·ªã trung b√¨nh HCHO theo th√°ng nƒÉm 2023 t·∫°i Ph∆∞·ªùng T√¢n B√¨nh, TP ƒê·ªìng Xo√†i')
    st.plotly_chart(fig_hcho, use_container_width=True)
